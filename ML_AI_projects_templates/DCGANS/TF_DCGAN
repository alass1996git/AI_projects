import tensorflow as tf
import glob
import imageio
import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
from tensorflow.keras import layers
import time

from IPython import display

# Get the Dataset - This will change based on the dataset at hand
# load mnist data - simple template
(train_images, train_labels), (_, _) = tf.keras.datasets.mnist.load_data()
# reshape the data to fit into the GAN
train_images = train_images.reshape(train_images.shape[0], 28, 28, 1).astype('float32')
# Reshape
train_images = (train_images - 127.5) / 127.5  
print(train_images.shape)
BUFFER_SIZE = 60000
BATCH_SIZE = 256
# Make the datset
train_dataset = tf.data.Dataset.from_tensor_slices(train_images).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)
##### DATASET DONE ######

EPOCHS = 50
noise_dim = 100
num_examples_to_generate = 16

def Gen():
    model = tf.keras.Sequential()
    # project a uniform distribution (100,0) to a 7*7*256 shape using dense layer
    # apply batch normalization and leaky relu and reshape it to a 7,7,256 tensor
    model.add(layers.Dense(7*7*256, use_bias=False, input_shape=(100,)))
    model.add(layers.BatchNormalization())
    model.add(layers.LeakyReLU())
    model.add(layers.Reshape((7, 7, 256)))
    assert model.output_shape == (None, 7, 7, 256)  # Note: None is the batch size

    # Use Transpose convolution to reduce the number of filters
    model.add(layers.Conv2DTranspose(128, (5, 5), strides=(1, 1), padding='same', use_bias=False))
    assert model.output_shape == (None, 7, 7, 128)
    model.add(layers.BatchNormalization())
    model.add(layers.LeakyReLU())

    # Use Transpose convolution to reduce the number of filters. Double stride to increase output shape
    model.add(layers.Conv2DTranspose(64, (5, 5), strides=(2, 2), padding='same', use_bias=False))
    assert model.output_shape == (None, 14, 14, 64)
    model.add(layers.BatchNormalization())
    model.add(layers.LeakyReLU())
    
    # Use Transpose convolution to reduce the number of filters. Double stride to increase output shape
    model.add(layers.Conv2DTranspose(1, (5, 5), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))
    assert model.output_shape == (None, 28, 28, 1)
    
    # overall takes uniform noise and transforms it into a 28,28,1 image. The 1 will be changed if there is more than
    # a single channel
    return model

# discriminator network - we need the generator to "fool" this net
def Disc():
    model = tf.keras.Sequential()
    # add a 2D convoultion layer. Input is the 28x28x1 1 channeled image
    # There are 64 output filters and stride is 2x2, so the output size is 64x14x14
    model.add(layers.Conv2D(64, (5, 5), strides=(2, 2), padding='same',
                                     input_shape=[28, 28, 1]))
    model.add(layers.LeakyReLU())
    model.add(layers.Dropout(0.3))

    # There are 128 output filters and stride is 2x2, so the output size is 128x7x7
    model.add(layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same'))
    model.add(layers.LeakyReLU())
    model.add(layers.Dropout(0.3))
    
    # Flatten and get a binary output that represents if the it is a true or false label
    # Real vs Fake (generated) images will fool the network
    model.add(layers.Flatten())
    model.add(layers.Dense(1))

    return model

# initialize generator and discriminator:
gen_m = Gen()
noise = tf.random.normal([1, 100])
generated_image = gen_m(noise, training=False)
plt.imshow(generated_image[0, :, :, 0], cmap='gray')

disc_m = Disc()
disc_out = disc_m(generated_image)
print (disc_out)

TF_CE = tf.keras.losses.BinaryCrossentropy(from_logits=True)

# hybridized cross entropy loss
# we care that fakes are correctly classified and real outputs are correctly classified
def discriminator_loss(real_output, fake_output):
    real_loss = TF_CE(tf.ones_like(real_output), real_output)
    fake_loss = TF_CE(tf.zeros_like(fake_output), fake_output)
    total_loss = real_loss + fake_loss
    return total_loss

# we want the generator to trick the generator as much as possible
def generator_loss(fake_output):
    return TF_CE(tf.ones_like(fake_output), fake_output)

# initialize optimiizers
gen_opt = tf.keras.optimizers.Adam(1e-4)
disc_opt = tf.keras.optimizers.Adam(1e-4)

# compile a training set for the training procedure
@tf.function
def train_step(images):
    noise = tf.random.normal([BATCH_SIZE, noise_dim])

    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
      generated_images = gen_m(noise, training=True)

      real_output = disc_m(images, training=True)
      fake_output = disc_m(generated_images, training=True)

      gen_loss = generator_loss(fake_output)
      disc_loss = discriminator_loss(real_output, fake_output)

    gradients_of_generator = gen_tape.gradient(gen_loss, gen_m.trainable_variables)
    gradients_of_discriminator = disc_tape.gradient(disc_loss, disc_m.trainable_variables)

    gen_opt.apply_gradients(zip(gradients_of_generator, gen_m.trainable_variables))
    disc_opt.apply_gradients(zip(gradients_of_discriminator, disc_m.trainable_variables))
    return gen_loss, disc_loss
    
def train(dataset, epochs):
    for epoch in range(25):
        start = time.time()
        print(epoch)
        i = 0
        for image_batch in dataset:
            dl, gl = train_step(image_batch)
            i = i + 1
            if i % 10 == 0:
                print(epoch, float(dl), float(gl))


train(train_dataset, EPOCHS)

fig = plt.figure(figsize=(4, 4))

test_input = tf.random.normal([num_examples_to_generate, noise_dim])
predictions = gen_m(test_input, training=False)
for i in range(predictions.shape[0]):
  plt.subplot(4, 4, i+1)
  plt.imshow(predictions[i, :, :, 0] * 127.5 + 127.5, cmap='gray')
  plt.axis('off')
plt.show()
â€‹
